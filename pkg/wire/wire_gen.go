// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"github.com/Done-0/jank/pkg/serve/controller"
	impl2 "github.com/Done-0/jank/pkg/serve/mapper/impl"
	"github.com/Done-0/jank/pkg/serve/service/impl"
)

// Injectors from wire.go:

// NewPluginController 使用 Wire 初始化插件控制器
func NewPluginController() (*controller.PluginController, error) {
	pluginService := impl.NewPluginService()
	pluginController := controller.NewPluginController(pluginService)
	return pluginController, nil
}

// NewRBACController 使用 Wire 初始化RBAC控制器
func NewRBACController() (*controller.RBACController, error) {
	rbacMapper := impl2.NewRBACMapper()
	userMapper := impl2.NewUserMapper()
	rbacService := impl.NewRBACService(rbacMapper, userMapper)
	rbacController := controller.NewRBACController(rbacService)
	return rbacController, nil
}

// NewThemeController 使用 Wire 初始化主题控制器
func NewThemeController() (*controller.ThemeController, error) {
	themeService := impl.NewThemeService()
	themeController := controller.NewThemeController(themeService)
	return themeController, nil
}

// NewUserController 使用 Wire 初始化用户控制器
func NewUserController() (*controller.UserController, error) {
	userMapper := impl2.NewUserMapper()
	rbacMapper := impl2.NewRBACMapper()
	userService := impl.NewUserService(userMapper, rbacMapper)
	userController := controller.NewUserController(userService)
	return userController, nil
}

// NewVerificationController 使用 Wire 初始化验证码控制器
func NewVerificationController() (*controller.VerificationController, error) {
	verificationService := impl.NewVerificationService()
	verificationController := controller.NewVerificationController(verificationService)
	return verificationController, nil
}
